@model SuperKidCity.Models.SettingViewModel
@{
    Layout = null;
}

@using (Html.BeginForm("Cam", "Setting", FormMethod.Post, new { @role = "form", @class = "form-horizontal", @id = "settingsForm_" + Model.SettingTypeId }))
{
    @Html.AntiForgeryToken()

    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    @Html.HiddenFor(m => m.SettingTypeId)
    <div class="container">
        <div class="row-fluid">
            <form class="form-horizontal">
                <fieldset>
                    <!-- Name -->
                    <div class="form-group">
                        @Html.LabelFor(model => model.CamSetting.Name, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="controls col-md-10">
                            @Html.EditorFor(model => model.CamSetting.Name, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.CamSetting.Name, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.CamSetting.IPv4, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="controls col-md-10">
                            @Html.EditorFor(model => model.CamSetting.IPv4, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.CamSetting.IPv4, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.CamSetting.Port, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="controls col-md-10">
                            @Html.EditorFor(model => model.CamSetting.Port, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.CamSetting.Port, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.CamSetting.UserName, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="controls col-md-10">
                            @Html.EditorFor(model => model.CamSetting.UserName, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.CamSetting.UserName, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.CamSetting.Password, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="controls col-md-10">
                            @Html.PasswordFor(model => model.CamSetting.Password, new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.CamSetting.Password, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.CamSetting.AuthenticationRequired, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="controls col-md-1">
                            <div class="checkbox">
                                @Html.EditorFor(model => model.CamSetting.AuthenticationRequired)
                            </div>
                            @Html.ValidationMessageFor(model => model.CamSetting.Name, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </fieldset>
                <div class="form-group">
                    <div class="col-md-offset-0 col-md-5">
                        <input type="button" value="Create" class="btn btn-default" onclick="return SubmitData(@Model.SettingTypeId)" />
                    </div>
                </div>
            </form>
        </div>
    </div>
}
